!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC = gcc$/;"	m
CC	libft/Makefile	/^CC = gcc -c$/;"	m
CFLAG	libft/Makefile	/^CFLAG = -Wall -Wextra -Werror$/;"	m
CObjects	Makefile	/^CObjects = $(addprefix $(OBJ_Dir), $(OBJ))$/;"	m
CSources	Makefile	/^CSources = $(addprefix $(SRC_Dir), $(SRC))$/;"	m
FLAGS	Makefile	/^FLAGS = -Wall -Wextra -Werror$/;"	m
FRACTOL_H	includes/fractol.h	/^# define FRACTOL_H$/;"	d
INCLUDE	Makefile	/^INCLUDE = -I .\/includes $/;"	m
KEY_ESCAPE	includes/fractol.h	/^# define KEY_ESCAPE /;"	d
LIBFT_H	includes/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LIBRARY	Makefile	/^LIBRARY = -L \/usr\/local\/lib -lmlx -framework OpenGL -framework AppKit$/;"	m
NAME	Makefile	/^NAME = fractol$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
OBJ	Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
OBJ	libft/Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
OBJ_Dir	Makefile	/^OBJ_Dir = .\/obj\/$/;"	m
SRC	Makefile	/^SRC = main.c  \\$/;"	m
SRC	libft/Makefile	/^SRC = .\/ft_atoi.c \\$/;"	m
SRC_Dir	Makefile	/^SRC_Dir = .\/srcs\/$/;"	m
a	includes/fractol.h	/^	double		a;$/;"	m	struct:s_complex
alpha	includes/fractol.h	/^	int			alpha;$/;"	m	struct:s_color
alpha	includes/fractol.h	/^	int			alpha;$/;"	m	struct:s_my_win
axes	includes/fractol.h	/^	t_axes		axes;$/;"	m	struct:s_my_man
b	includes/fractol.h	/^	double		b;$/;"	m	struct:s_complex
bits_per_pixel	includes/fractol.h	/^	int			bits_per_pixel;$/;"	m	struct:s_my_win
blue	includes/fractol.h	/^	int			blue;$/;"	m	struct:s_color
burning_ship	includes/fractol.h	/^	burning_ship$/;"	e	enum:e_myfractal
c	includes/fractol.h	/^	t_complex	c;$/;"	m	struct:s_my_man
color	includes/fractol.h	/^	t_color		color;$/;"	m	struct:s_my_man
content	includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
content_size	includes/libft.h	/^	size_t			content_size;$/;"	m	struct:s_list
content_size	libft/libft.h	/^	size_t			content_size;$/;"	m	struct:s_list
data	includes/fractol.h	/^	char		*data;$/;"	m	struct:s_my_win
e_myfractal	includes/fractol.h	/^typedef enum	e_myfractal$/;"	g
endian	includes/fractol.h	/^	int			endian;$/;"	m	struct:s_my_win
fractal	includes/fractol.h	/^	t_fractal	fractal;$/;"	m	struct:s_my_win
ft_atoi	libft/ft_atoi.c	/^int		ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calcul_fractal	srcs/file_mandelbrot.c	/^void			ft_calcul_fractal(t_my_man *s_man, t_my_win *s_win)$/;"	f
ft_calcul_iteration	srcs/file_mandelbrot.c	/^void			ft_calcul_iteration(t_my_man *s_man, t_my_win *s_win)$/;"	f
ft_calcul_offset_axes	srcs/file_mandelbrot.c	/^void			ft_calcul_offset_axes(t_my_man *s_man, t_my_win *s_win)$/;"	f
ft_choose_color_and_put_pixel	srcs/file_mandelbrot.c	/^void			ft_choose_color_and_put_pixel(t_my_man *s_man, t_my_win *s_win)$/;"	f
ft_choose_fractol	srcs/file_menu.c	/^void			ft_choose_fractol(t_my_win *s_win, int argc, char **argv)$/;"	f
ft_complex_absolute_value_square	srcs/file_math_util.c	/^void			ft_complex_absolute_value_square(t_complex *z)$/;"	f
ft_complex_add	srcs/file_math_util.c	/^t_complex		ft_complex_add(t_complex z1, t_complex z2)$/;"	f
ft_complex_mod	srcs/file_math_util.c	/^double			ft_complex_mod(t_complex z)$/;"	f
ft_complex_square	srcs/file_math_util.c	/^void			ft_complex_square(t_complex *z)$/;"	f
ft_convert_rgb_hsv	srcs/file_menu.c	/^t_color			ft_convert_rgb_hsv(t_color color)$/;"	f
ft_draw	srcs/file_mandelbrot.c	/^void			ft_draw(t_my_win *s_win)$/;"	f
ft_init_fractal	srcs/main.c	/^void			ft_init_fractal(t_my_win *s_win)$/;"	f
ft_init_mlx_window	srcs/main.c	/^void			ft_init_mlx_window(t_my_win *s_win)$/;"	f
ft_init_param_menu	srcs/file_menu.c	/^void			ft_init_param_menu(t_my_win *s_win)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char		*ft_itoa(int n)$/;"	f
ft_itoa_first	libft/ft_itoa.c	/^static void	ft_itoa_first(int *nega, int *n, int *nb, int *i)$/;"	f	file:
ft_itoa_prime	libft/ft_itoa.c	/^static char	*ft_itoa_prime(int *n, char *str)$/;"	f	file:
ft_itoa_third	libft/ft_itoa.c	/^static void	ft_itoa_third(int *nb, int *i, char *str, int *nega)$/;"	f	file:
ft_key_hook	srcs/main.c	/^int				ft_key_hook(int key, t_my_win *s_win)$/;"	f
ft_lstadd	libft/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstdel	libft/ft_lstdel.c	/^void	ft_lstdel(t_list **alst, void (*del)(void*, size_t))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void*, size_t))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list		*ft_lstnew(void const *content, size_t content_size)$/;"	f
ft_make_complex	srcs/file_math_util.c	/^t_complex		ft_make_complex(double a, double b)$/;"	f
ft_memalloc	libft/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memdel	libft/ft_memdel.c	/^void	ft_memdel(void **ap)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_pointer	srcs/main.c	/^int				ft_pointer(int button, int x, int y, t_my_win *s_win)$/;"	f
ft_put_pixel	srcs/file_menu.c	/^void			ft_put_pixel(char *ptr_data, t_point point,$/;"	f
ft_putchar	libft/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	libft/ft_putendl.c	/^void	ft_putendl(char const *s)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	libft/ft_putnbr.c	/^void	ft_putnbr(int n)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/ft_putstr.c	/^void	ft_putstr(char const *s)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f
ft_quit	srcs/file_menu.c	/^void			ft_quit(char *str)$/;"	f
ft_split_first	libft/ft_strsplit.c	/^static void	ft_split_first(char const *s, int *word, char *c)$/;"	f	file:
ft_str_trim_third	libft/ft_strsplit.c	/^static int	ft_str_trim_third(int *word, const char *s, char *c, char **str)$/;"	f	file:
ft_strcat	libft/ft_strcat.c	/^char	*ft_strcat(char *s1, const char *s2)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strclr	libft/ft_strclr.c	/^void	ft_strclr(char *s)$/;"	f
ft_strcmp	libft/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcpy	libft/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdel	libft/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strequ	libft/ft_strequ.c	/^int		ft_strequ(const char *s1, const char *s2)$/;"	f
ft_striter	libft/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char *))$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t		ft_strlen(const char *s)$/;"	f
ft_strmap	libft/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncat	libft/ft_strncat.c	/^char	*ft_strncat(char *s1, const char *s2, size_t n)$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, int n)$/;"	f
ft_strncpy	libft/ft_strncpy.c	/^char	*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f
ft_strnequ	libft/ft_strnequ.c	/^int		ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	libft/ft_strnew.c	/^char	*ft_strnew(size_t size)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^void	*ft_strrchr(const char *s, int c)$/;"	f
ft_strsplit	libft/ft_strsplit.c	/^char		**ft_strsplit(char const *s, char c)$/;"	f
ft_strstr	libft/ft_strstr.c	/^char	*ft_strstr(const char *haystack, const char *needle)$/;"	f
ft_strsub	libft/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char			*ft_strtrim(char const *s)$/;"	f
ft_strtrim_second	libft/ft_strsplit.c	/^static void	ft_strtrim_second(const char *s, int *j, char *c, int *letter)$/;"	f	file:
ft_strtrimsecond	libft/ft_strtrim.c	/^static void		ft_strtrimsecond(int *i, const char *s, char *swap, char *swap2)$/;"	f	file:
ft_strtrimthird	libft/ft_strtrim.c	/^static void		ft_strtrimthird(int *i, char *swap, char *swap2)$/;"	f	file:
ft_tolower	libft/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
green	includes/fractol.h	/^	int			green;$/;"	m	struct:s_color
h	includes/fractol.h	/^	int			h;$/;"	m	struct:s_color
height	includes/fractol.h	/^	int			height;$/;"	m	struct:s_my_win
img	includes/fractol.h	/^	void		*img;$/;"	m	struct:s_my_win
init	includes/fractol.h	/^	void		*init;$/;"	m	struct:s_my_win
julia	includes/fractol.h	/^	julia,$/;"	e	enum:e_myfractal
listparam	includes/fractol.h	/^	char		**listparam;$/;"	m	struct:s_my_win
main	srcs/main.c	/^int				main(int argc, char **argv)$/;"	f
mandelbrot	includes/fractol.h	/^	mandelbrot,$/;"	e	enum:e_myfractal
max	includes/fractol.h	/^	t_point		max;$/;"	m	struct:s_axes
min	includes/fractol.h	/^	t_point		min;$/;"	m	struct:s_axes
mouse	includes/fractol.h	/^	t_point		mouse;$/;"	m	struct:s_my_man
n	includes/fractol.h	/^	double		n;$/;"	m	struct:s_my_man
n_max	includes/fractol.h	/^	double		n_max;$/;"	m	struct:s_my_man
next	includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
offset	includes/fractol.h	/^	t_point		offset;$/;"	m	struct:s_my_man
pixel	includes/fractol.h	/^	t_point		pixel;$/;"	m	struct:s_my_man
point	includes/fractol.h	/^	t_point		point;$/;"	m	struct:s_my_man
red	includes/fractol.h	/^	int			red;$/;"	m	struct:s_color
s_axes	includes/fractol.h	/^typedef struct	s_axes$/;"	s
s_color	includes/fractol.h	/^typedef struct	s_color$/;"	s
s_complex	includes/fractol.h	/^typedef struct	s_complex$/;"	s
s_list	includes/libft.h	/^typedef struct		s_list$/;"	s
s_list	libft/libft.h	/^typedef struct		s_list$/;"	s
s_man	includes/fractol.h	/^	t_my_man	s_man;$/;"	m	struct:s_my_win
s_my_man	includes/fractol.h	/^typedef struct	s_my_man$/;"	s
s_my_win	includes/fractol.h	/^typedef struct	s_my_win$/;"	s
s_pixel	includes/fractol.h	/^typedef struct	s_pixel$/;"	s
s_point	includes/fractol.h	/^typedef struct	s_point$/;"	s
size_line	includes/fractol.h	/^	int			size_line;$/;"	m	struct:s_my_win
t_axes	includes/fractol.h	/^}				t_axes;$/;"	t	typeref:struct:s_axes
t_color	includes/fractol.h	/^}				t_color;$/;"	t	typeref:struct:s_color
t_complex	includes/fractol.h	/^}				t_complex;$/;"	t	typeref:struct:s_complex
t_fractal	includes/fractol.h	/^}				t_fractal;$/;"	t	typeref:enum:e_myfractal
t_list	includes/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_list	libft/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_my_man	includes/fractol.h	/^}				t_my_man;$/;"	t	typeref:struct:s_my_man
t_my_win	includes/fractol.h	/^}				t_my_win;$/;"	t	typeref:struct:s_my_win
t_pixel	includes/fractol.h	/^}				t_pixel;$/;"	t	typeref:struct:s_pixel
t_point	includes/fractol.h	/^}				t_point;$/;"	t	typeref:struct:s_point
valid_param	includes/fractol.h	/^	char		*valid_param;$/;"	m	struct:s_my_win
width	includes/fractol.h	/^	int			width;$/;"	m	struct:s_my_win
win	includes/fractol.h	/^	void		*win;$/;"	m	struct:s_my_win
x	includes/fractol.h	/^	double		x;$/;"	m	struct:s_point
x	includes/fractol.h	/^	int			x;$/;"	m	struct:s_my_win
x	includes/fractol.h	/^	int			x;$/;"	m	struct:s_pixel
y	includes/fractol.h	/^	double		y;$/;"	m	struct:s_point
y	includes/fractol.h	/^	int			y;$/;"	m	struct:s_my_win
y	includes/fractol.h	/^	int			y;$/;"	m	struct:s_pixel
z	includes/fractol.h	/^	t_complex	z;$/;"	m	struct:s_my_man
zoom	includes/fractol.h	/^	double		zoom;$/;"	m	struct:s_my_man
